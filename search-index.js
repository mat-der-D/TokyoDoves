var searchIndex = JSON.parse('{\
"tokyodoves":{"doc":"Crate Description","t":"NEIDDDDDDNDDNEDEDDDNNNNNNNDNNDENNLACLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFKLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCLLLCLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMCDEDCCCNCDCCDDNSSDCCNNLLLALLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLFFLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNENENNENEENNNNNNNENNNNNNNEENENNNENNNNNNNNNNENNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMIDDDNNDDEENNNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["A","Action","ActionContainer","ActionsBwd","ActionsBwdIntoIter","ActionsBwdIter","ActionsFwd","ActionsFwdIntoIter","ActionsFwdIter","B","Board","BoardBuilder","Both","Color","ColorIter","Dove","DoveIter","DoveSet","DoveSetIntoIter","Green","H","M","Move","None","OneSide","Put","Rectangle","Red","Remove","Shift","SurroundedStatus","T","Y","add","analysis","array_macro","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_unchecked","check_action","check_action_bwd","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color_dove_to_char","contains","contains","contains","contains","count_doves_on_field","count_doves_on_field_of","default","default","dh","dh_mut","dove","doves_in_hand_of","doves_on_field_of","dv","dv_mut","empty","eq","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ssn","from_str","from_u16_bits","from_u64","from_u64_bits","game","hash","hash","hash","hash","hash","hash","hash","hmax","hmin","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","is_in_hand","is_on_field","iter","iter","iter","iter","legal_actions","legal_actions_bwd","len","len","len","len","len","len","liberty","liberty_of_boss","minimum_rectangle","neg","new","new","next","next","next","next","next","next","next","next_back","next_back","not","nth","nth","perform","perform_bwd","perform_bwd_copied","perform_copied","perform_unchecked","perform_unchecked_copied","player","position_in_rbcc","prune_outside_4x4","put_dove","remove_dove","shift","size","size_hint","size_hint","strum","strum_macros","sub","surrounded_status","swap_color","thiserror","to_4x4_matrix","to_framed_string","to_invariant_u64","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_simple_string","to_ssn","to_string","to_u64","try_char_to_color_dove","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_4x4_matrix","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vmax","vmin","BoardSet","BoardValue","BoardValueKind","BoardValueTree","Capacity","Difference","Drain","Finished","Intersection","Interval","IntoIter","Iter","LazyBoardLoader","LazyRawBoardLoader","Lose","MAX","MIN","PositionMapper","SymmetricDifference","Union","Unknown","Win","actions","actions_children","board","board_set","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","child","children","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","compare_board_value","contains","contains","contains","contains_all","contains_all","create_checkmate_tree","create_checkmate_tree_with_value","default","default","depth","eq","eq","eq","evaluate_board","find_best_actions","finished","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","hash","increment","into","into","into","into","into","into","into","into_iter","into_iter","into_raw","is_finished","is_good_for_puzzle","is_leaf","is_lose","is_unknown","is_win","kind","left","lose","map","new","new","new","new","next","next","num_children","partial_cmp","partial_cmp","player","print_tree","raw","raw_mut","right","save_as_dot","single","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_create","try_decrement","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_next","try_next","try_unwrap","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unknown","unwrap","value","win","BoardSet","Capacity","Difference","Drain","Intersection","IntoIter","Iter","RawBoardSet","RawDifference","RawDrain","RawIntersection","RawIntoIter","RawIter","RawSymmetricDifference","RawUnion","SymmetricDifference","Union","absorb","absorb","add","add_assign","bitand","bitand","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","contains","contains","default","default","default","difference","difference","drain","drain","eq","eq","eq","extend","extend","extend","extend","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","insert","insert","intersection","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw","is_disjoint","is_disjoint","is_empty","is_empty","is_empty","is_subset","is_subset","is_superset","is_superset","iter","iter","len","len","len","load","load","load_filter","load_filter","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","raw","raw_mut","remove","remove","required_capacity","required_capacity","required_capacity_filter","required_capacity_filter","reserve","reserve","retain","retain","save","save","shrink_to_fit","shrink_to_fit","sub","sub","symmetric_difference","symmetric_difference","take","take","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","with_capacity","with_capacity","ActionConvertError","ActionConvertError","ActionPerformError","ActionPerformErrorKind","AlreadyOnBoard","AnalysisError","AnalysisError","ArgsValidationError","ArgsValidationErrorKind","BoardCreateError","BoardCreateErrorKind","BoardError","BoardError","BoardValueMismatch","BossNotFound","BossNotFound","BossNotFound","ColorNotInferred","DecodingError","DecodingErrorKind","DoveDuplicated","DoveIsolated","DoveNotFound","DoveNotInferred","DoveNotOnBoard","DrawJudge","EncodingError","EncodingErrorKind","Error","FinishedGameBoard","GameError","GameError","GameFinished","GameRuleCreateError","GameRuleCreateErrorKind","InitialBoardError","InvalidPosition","InvalidShift","MaskShiftError","NotOnBoard","NumberNotFollowAfterNEWS","ObstacleInRoute","OutOfField","PlayerMismatch","PlayingError","PlayingErrorKind","PositionDuplicated","PositionOutOfRange","ProhibitedRemove","ThroughOuterField","ToBeIsolated","TriedToRemoveBoss","UnexpectedCharacter","UnsupportedValue","as_action_convert_error","as_analysis_error","as_board_error","as_game_error","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","provide","provide","provide","provide","provide","source","source","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","kind","kind","kind","action","kind","kind","kind","kind","Agent","AnalystAgent","Arena","ConsoleAgent","Draw","Draw","Game","GameRule","GameStatus","Judge","LastWins","NextWins","Ongoing","RandomAgent","Win","auto_play","board","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_action","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","eq","eq","first_player","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","initial_board","into","into","into","into","into","into","into","into","is_ongoing","is_remove_accepted","legal_actions","new","new","new","new","new","new","new_with_rule","next_player","perform","play","play","play","play","reset","rule","status","suicide_atk_judge","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","winner","with_first_player","with_initial_board","with_is_remove_accepted","with_suicide_atk_judge"],"q":[[0,"tokyodoves"],[343,"tokyodoves::analysis"],[509,"tokyodoves::analysis::board_set"],[777,"tokyodoves::error"],[961,"tokyodoves::error::ActionConvertError"],[963,"tokyodoves::error::AnalysisError"],[964,"tokyodoves::error::BoardError"],[967,"tokyodoves::error::GameError"],[969,"tokyodoves::game"]],"d":["Represents <strong>A</strong>niki-hato, which can move to adjacent squares …","Actions players can perform in their turn.","Read-only <code>Sized</code> container of <code>Action</code>s.","An <code>ActionContainer</code> returned by <code>Board::legal_actions_bwd</code>","An <code>Iterator</code> returned by <code>ActionsBwd::into_iter</code>","An <code>Iterator</code> returned by <code>ActionsBwd::iter</code>","An <code>ActionContainer</code> returned by <code>Board::legal_actions</code>","An <code>Iterator</code> returned by <code>ActionsFwd::into_iter</code>","An <code>Iterator</code> returned by <code>ActionsFwd::iter</code>","Represents <strong>B</strong>oss-hato, which can move to adjacent squares …","An implementation of Tokyo Doves board based on bitboard …","A builder of <code>Board</code>","","Two colors of player, just like black and white in chess.","An iterator over the variants of Color","Six types of doves.","An iterator over the variants of Dove","Read-only <code>Sized</code> container of <code>Dove</code>s without duplication.","An <code>Iterator</code> returned by <code>DoveSet::into_iter</code>","","Represents <strong>H</strong>ajike-hato, which can move (or jump) like the …","Represents <strong>M</strong>amedeppo-bato, which can move to four …","Move <code>Color</code>’s <code>Dove</code> on the board toward <code>Shift</code> from its …","","","Put <code>Dove</code> from <code>Color</code>’s hand on the board at the position …","Rectangle with edges of <code>usize</code> coordinates.","","Remove <code>Color</code>’s <code>Dove</code> from the board (which returns to …","Difference between two squares.","An enum returned by <code>Board::surrounded_status</code>","Represents <strong>T</strong>otsu-hato, which can move forward, backward or …","Represents <strong>Y</strong>aibato, which can move to four adjacent …","","Convenient tools to analyze the game","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if <code>action</code> is legal.","Check if backward <code>action</code> is legal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if it contains the specified <code>Action</code>.","Returns <code>true</code> if it contains the specified <code>Dove</code>.","","","Counts the number of all doves on the field.","Counts the number of doves of the <code>player</code> on the field.","","","Returns a reference to vertical difference of coordinates.","Returns a mutable reference to vertical difference of …","","Collects and returns the set of doves in the <code>player</code>’s …","Collects and returns the set of doves of the <code>player</code> on the …","Returns a reference to horizontal difference of …","Returns a mutable reference to horizontal difference of …","","","","","","","","","Error variants","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates <code>Action</code> from <code>&amp;str</code> in Standard Short Notation (SSN)","","Create <code>BoardBuilder</code> by indicating positions of doves in <code>u16</code>…","Alias of <code>from::&lt;u64&gt;</code>","Create <code>BoardBuilder</code> by indicating positions of doves in <code>u64</code>…","","","","","","","","","The maximum coordinate in horizontal direction","The minimum coordinate in horizontal direction","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns <code>true</code> if it is empty.","Returns <code>true</code> if it is empty.","","","Returns <code>true</code> if the <code>player</code>’s <code>dove</code> is in their hand.","Returns <code>true</code> if the <code>player</code>’s <code>dove</code> is on the field.","","","","","Collects and returns the set of all legal <code>Action</code>s for the …","Collects and returns the set of all legal backward-<code>Action</code>s …","Returns the number of elements.","Returns the number of elements.","","","","","Returns “liberty” of <code>player</code>’s <code>dove</code>, where liberty is …","Returns “liberty” of <code>player</code>’s boss-hato.","Returns the minimum rectangle that contains all doves on …","","","Constructs <code>Shift</code>.","","","","","","","","","","","","","Performs the specified <code>action</code> to <code>self</code>.","Performs the specified backward action to <code>self</code>.","Returns the result of performing the specified backward …","Returns the result of performing the specified action to …","Performs <code>action</code> to <code>self</code> (without distinction between …","Returns the result of performing the specified action to …","","Returns the position of specified player and dove in …","","","","","Calculates the lengths of horizontal and vertical edges.","","","","","","Get info whether bosses are surrounded or not","Swaps the colors red and green.","","Returns 4x4 matrix (array of array) representing the board.","Returns a <code>String</code> expression with a frame.","Returns a light expression of <code>u64</code> with a universality.","","","","","","","","","","","","","","","Converts <code>self</code> into <code>String</code> in Standard Short Notation (SSN)","","Returns a light expression of 64 bits.","","","","","","","","","","","","","","","","","","","","","Alias of <code>try_from::&lt;..&gt;</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum coordinate in vertical direction","The minimum coordinate in vertical direction","","Value of board","Three kinds of <code>BoardValue</code>","A tree structure that contains <code>Board</code> and <code>BoardValue</code> on its …","","","","","","Represents closed interval between two <code>BoardValue</code>s","","","","","","Win(1)","Lose(2)","","","","","","Returns an <code>Iterator</code> that iterates over all <code>Action</code>s …","Returns an <code>Iterator</code> that iterates all pairs of <code>Action</code> and …","Returns <code>Board</code> at the root node","","","","","","","","","","","","","","","","Returns a reference to a child tree associated to the …","Returns an <code>Iterator</code> that iterates over all children","","","","","","","","","","","Compares the value of specified <code>Board</code> to a given <code>BoardValue</code>…","","","","","","Creates an <code>BoardValueTree</code> that describes routes to ends of …","Creates an <code>BoardValueTree</code> that describes routes to ends of …","","","Returns the depth of the tree","","","","Calculates <code>BoardValue</code> of specified <code>Board</code>.","Collects the best <code>Action</code>s by <code>BoardValue</code>","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns “next” value of a series below:","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns <code>true</code> if it is a leaf node, i.e., it has no …","","","","","","","","","","","","","","Counts the number of children","","","Returns a reference to the player <code>Color</code> at the root node","Prints contents of <code>BoardValueTree</code> (experimental api)","","","","","","","","","","","","","","","Returns “next” values of a series below:","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the <code>BoardValue</code> at the root node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Errors on conversion between <code>Action</code> and string in SSN","","","Error kinds on performing <code>Action</code>","","Error variants on analysis for games","","","Error kinds on validation of arguments","","Error kinds on creating <code>Board</code>","Errors associated to <code>Board</code>","","","","","","","","Error kinds on conversion of <code>Action</code> from string in SSN","","","","","","","","Error kinds on conversion of <code>Action</code> into string in SSN","Root of all errors in this crate","","Errors associated to <code>Game</code>","","","","Error kinds on creating <code>GameRule</code>","","","","","","","","","","","Error kinds that may occur during game playing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","It is a draw game","The game has already finished; it was a draw game","A struct that provides methods to play Tokyo Doves games …","Some kinds of detailed rules","Status of the game","Judgement of winner on some event","The player just before the event is treated as the winner","The player just after the event is treated as the winner","The game is ongoing","","The game has already finished; one player defeated the …","","Get a reference to board","","","","","","","","","","","","","","","","","Checks if the specified <code>Action</code> is legal","","","","","","","","","Returns the default value.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the game is ongoing","","Returns an <code>ActionContainer</code> of legal <code>Action</code>s.","","","Constructs <code>GameRule</code> object","Constructs <code>Game</code>","","","Constructs <code>Game</code> with a specified <code>rule</code>","Get a reference to the next player","Performs specified <code>Action</code>.","","","","","Reset <code>Game</code> to the initial state","Get a reference to game rule","Get a reference to status","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns winner.","Update the player moving firstly in the beginning of the …","Update initial_board of <code>GameRule</code>","Update whether accept <code>Remove</code> in the game or not","Update judgement rule when both bosses are surrounded …"],"i":[14,0,0,0,0,0,0,0,0,14,0,0,10,0,0,0,0,0,0,12,14,14,6,10,10,6,0,12,6,0,0,14,14,1,0,0,28,25,29,26,30,6,7,8,9,10,3,11,2,12,13,14,15,1,28,25,29,26,30,6,7,8,9,10,3,11,2,12,13,14,15,1,2,2,3,3,6,7,8,9,10,3,11,2,12,13,14,15,1,6,7,8,9,10,3,11,2,12,13,14,15,1,0,90,7,8,9,3,3,3,2,1,1,6,3,3,1,1,2,6,10,3,11,12,14,1,0,6,7,8,9,10,3,3,11,2,12,13,14,15,1,28,25,29,26,30,6,7,8,9,10,3,11,2,2,2,2,12,13,14,15,1,6,2,2,2,2,0,6,10,3,11,12,14,1,11,11,8,9,28,25,29,26,30,6,7,8,9,10,3,11,2,12,13,14,15,1,28,25,29,26,30,7,8,9,13,15,90,7,8,9,3,3,8,9,12,14,3,3,90,7,8,9,13,15,3,3,3,1,2,1,28,25,29,26,30,13,15,13,15,12,13,15,3,3,3,3,3,3,6,3,2,2,2,6,11,13,15,0,0,1,3,3,0,3,3,3,6,7,8,9,10,3,11,2,12,13,14,15,1,3,6,3,3,0,28,25,29,26,30,6,7,8,9,10,3,11,2,2,12,13,14,15,1,2,28,25,29,26,30,6,7,8,9,10,3,11,2,12,13,14,15,1,28,25,29,26,30,6,7,8,9,10,3,11,2,12,13,14,15,1,11,11,0,0,0,0,0,0,0,37,0,0,0,0,0,0,37,38,38,0,0,0,37,37,33,33,33,0,37,38,33,39,44,46,40,37,38,33,39,44,46,40,33,33,37,38,33,39,40,37,38,33,39,40,0,39,44,46,44,46,0,0,37,38,33,37,38,39,0,0,38,37,37,38,38,33,39,39,44,46,40,37,38,38,33,39,44,44,46,46,40,37,38,38,37,38,33,39,44,46,40,44,46,44,38,33,33,38,38,38,38,39,38,40,33,39,44,46,44,46,33,37,38,33,0,44,44,39,33,39,37,38,33,39,40,37,38,39,40,38,37,38,33,39,44,46,40,37,38,33,39,44,46,40,44,46,38,37,38,33,39,44,46,40,38,38,33,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,48,52,52,47,48,47,48,47,48,61,63,56,54,64,59,65,52,47,66,55,60,53,67,58,68,48,61,63,56,54,64,59,65,52,47,66,55,60,53,67,58,68,48,47,48,47,48,52,47,48,52,47,48,47,48,52,47,48,47,48,47,48,52,47,48,47,47,48,48,52,47,48,61,63,56,54,64,59,65,52,47,47,47,66,55,60,53,67,58,68,48,48,48,47,48,47,48,47,48,61,63,56,54,64,59,65,52,47,66,55,60,53,67,58,68,48,61,63,56,54,64,59,65,47,47,66,55,60,53,67,58,68,48,48,47,47,48,52,47,48,47,48,47,48,47,48,52,47,48,47,48,47,48,52,47,48,61,63,56,54,64,59,65,66,55,60,53,67,58,68,47,47,47,48,47,48,47,48,47,48,47,48,47,48,47,48,47,48,47,48,47,48,52,47,48,61,63,56,54,64,59,65,52,47,66,55,60,53,67,58,68,48,61,63,56,54,64,59,65,52,47,66,55,60,53,67,58,68,48,61,63,56,54,64,59,65,52,47,66,55,60,53,67,58,68,48,47,48,47,48,0,69,69,0,74,0,4,71,0,69,0,0,4,71,73,75,76,76,70,0,73,73,75,76,76,79,70,0,0,79,0,4,78,72,0,77,74,74,69,74,76,74,74,78,72,0,73,73,78,74,74,74,76,79,69,4,4,4,4,69,73,74,70,75,76,72,77,78,71,79,4,69,73,74,70,75,76,72,77,78,71,79,4,4,69,69,73,74,70,70,75,76,72,72,77,78,71,71,79,79,4,4,4,4,4,4,4,4,4,4,4,69,69,73,74,70,75,76,72,77,78,71,79,4,69,73,74,70,75,76,72,77,78,71,79,4,69,70,72,71,4,69,4,69,70,72,71,79,4,69,73,74,70,75,76,72,77,78,71,79,4,69,73,74,70,75,76,72,77,78,71,79,4,69,73,74,70,75,76,72,77,78,71,79,91,92,93,94,95,94,96,97,0,0,0,0,85,86,0,0,0,0,85,85,86,0,86,83,84,89,83,41,85,86,84,87,88,89,83,41,85,86,84,87,88,84,41,85,86,84,41,85,86,84,41,87,88,85,86,41,41,85,86,84,84,89,83,41,85,86,84,87,88,85,86,41,89,83,41,85,86,84,87,88,84,41,84,89,83,41,84,87,88,84,84,84,82,89,87,88,84,84,84,41,41,85,86,84,84,89,83,41,85,86,84,87,88,89,83,41,85,86,84,87,88,89,83,41,85,86,84,87,88,84,41,41,41,41],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[5,[3,4]]]],[2,3],[[3,6],[[5,[4]]]],[[3,6],[[5,[4]]]],[6,6],[7,7],[8,8],[9,9],[10,10],[3,3],[11,11],[2,2],[12,12],[13,13],[14,14],[15,15],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,14],16],[6,17],[[7,14],17],[[8,6],17],[[9,6],17],[3,18],[[3,12],18],[[],3],[[],2],[1,19],[1,19],[6,14],[[3,12],7],[[3,12],7],[1,19],[1,19],[[],2],[[6,6],17],[[10,10],17],[[3,3],17],[[11,11],17],[[12,12],17],[[14,14],17],[[1,1],17],0,[[6,20],21],[[7,20],21],[[8,20],21],[[9,20],21],[[10,20],21],[[3,20],21],[[3,20],21],[[11,20],21],[[2,20],21],[[12,20],21],[[13,20],21],[[14,20],21],[[15,20],21],[[1,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[23,3],[[5,[6,4]]]],[23,[[5,[2]]]],[[],2],[22,2],[[],2],0,[[6,24]],[[10,24]],[[3,24]],[[11,24]],[[12,24]],[[14,24]],[[1,24]],0,0,[[8,18]],[[9,18]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[8],[9],[[]],[[]],[[],17],[7,17],[8,17],[9,17],[[3,12,14],17],[[3,12,14],17],[8,25],[9,26],[[],13],[[],15],[[3,12,17,17,17],8],[[3,12,17,17,17],9],[[],18],[7,18],[8,18],[9,18],[13,18],[15,18],[[3,12,14],[[27,[18]]]],[[3,12],18],[3,11],[1],[[],2],[[19,19],1],[28,27],[25,27],[29,27],[26,27],[30,27],[13,27],[15,27],[13,27],[15,27],[12],[[13,18],27],[[15,18],27],[[3,6],[[5,[4]]]],[[3,6],[[5,[4]]]],[[3,6],[[5,[3,4]]]],[[3,6],[[5,[3,4]]]],[[3,6]],[[3,6],3],[6,12],[[3,12,14],[[27,[1]]]],[2,2],[[2,18,18,12,14],2],[[2,12,14],2],[6,[[27,[1]]]],0,[13],[15],0,0,[[1,1]],[3,10],[3],0,[3],[3,31],[[3,12],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,16,23],31],[[6,3],[[5,[31,4]]]],[[],31],[3,22],[16,27],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],[[5,[2]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],[[5,[2,4]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[33,[[34,[6,33]]]],[33,[[35,[6,33]]]],[33,3],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[33,6],[[27,[33]]]],[33,[[36,[6,33]]]],[37,37],[38,38],[33,33],[39,39],[40,40],[[]],[[]],[[]],[[]],[[]],[[3,38,12,41],[[5,[42,4]]]],[[39,38],17],[[[44,[43]],3],[[45,[17]]]],[[[46,[43]],22],[[45,[17]]]],[[[44,[43]],47],[[45,[17]]]],[[[46,[43]],48],[[45,[17]]]],[[3,12,18,41],[[5,[33,4]]]],[[3,38,12,41],[[5,[33,4]]]],[[],37],[[],38],[33,18],[[37,37],17],[[38,38],17],[[39,39],17],[[3,12,18,41],[[5,[39,4]]]],[[3,12,18,41],[[5,[[49,[6]],4]]]],[[],38],[[37,20],21],[[37,20],21],[[38,20],21],[[38,20],21],[[33,20],21],[[39,20],21],[[39,20],21],[[[44,[[0,[43,50]]]],20],21],[[[46,[[0,[43,50]]]],20],21],[[40,20],21],[[]],[[]],[[[27,[18]]],38],[[]],[[]],[[]],[[[46,[43]]],[[44,[43]]]],[[]],[[[44,[43]]],[[46,[43]]]],[[]],[[37,24]],[[38,24]],[38,38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[44,[43]]],[[46,[43]]]],[38,17],[[33,18],17],[33,17],[38,17],[38,17],[38,17],[38,37],[39,38],[18,[[27,[38]]]],[[40,18,18],18],[[3,12],33],[[38,38],39],[43,[[44,[43]]]],[43,[[46,[43]]]],[[[44,[43]]],27],[[[46,[43]]],27],[33,18],[[37,37],[[27,[42]]]],[[38,38],[[27,[42]]]],[33,12],[33],[[[44,[43]]],[[46,[43]]]],[[[44,[43]]],[[46,[43]]]],[39,38],[[33,51],45],[39,[[27,[38]]]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[],31],[[18,18],[[27,[40]]]],[38,[[27,[38]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[44,[43]]],[[45,[[27,[3]]]]]],[[[46,[43]]],[[45,[[27,[22]]]]]],[38,[[27,[18]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],38],[38,18],[33,38],[18,[[27,[38]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[47,47]],[[48,48]],[[52,52]],[[52,52]],[[47,47]],[[48,48]],[[47,47]],[[48,48]],[[47,47]],[[48,48]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,52],[48,52],[47],[48],[52,52],[47,47],[48,48],[[]],[[]],[[]],[[47,3],17],[[48,22],17],[[],52],[[],47],[[],48],[[47,47],53],[[48,48],54],[47,55],[48,56],[[52,52],17],[[47,47],17],[[48,48],17],[[47,57]],[[47,57]],[[48,57]],[[48,57]],[[52,20],21],[[47,20],21],[[48,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],47],[48,47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47,48],[[]],[[],48],[57,47],[57,48],[[47,3]],[[48,22]],[[47,47],58],[[48,48],59],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[47],[47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48],[48],[47,48],[[47,47],17],[[48,48],17],[52,17],[47,17],[48,17],[[47,47],17],[[48,48],17],[[47,47],17],[[48,48],17],[47,60],[48,61],[52,18],[47,18],[48,18],[[47,43],45],[[48,43],45],[[47,43,62],45],[[48,43,62],45],[[],52],[[],47],[[],48],[61,27],[63,27],[56,27],[54,27],[64,27],[59,27],[65,27],[66,27],[55,27],[60,27],[53,27],[67,27],[58,27],[68,27],[47,48],[47,48],[[47,3],17],[[48,22],17],[43,52],[43,52],[[43,62],52],[[43,62],52],[[47,52]],[[48,52]],[[47,62]],[[48,62]],[[47,51],45],[[48,51],45],[47],[48],[[47,47]],[[48,48]],[[47,47],67],[[48,48],64],[[47,3],[[27,[3]]]],[[48,22],[[27,[22]]]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[47,47],68],[[48,48],65],[52,47],[52,48],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[69,[[27,[70]]]],[4,[[27,[71]]]],[4,[[27,[69]]]],[4,[[27,[72]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,20],21],[[4,20],21],[[69,20],21],[[69,20],21],[[73,20],21],[[74,20],21],[[70,20],21],[[70,20],21],[[75,20],21],[[76,20],21],[[72,20],21],[[72,20],21],[[77,20],21],[[78,20],21],[[71,20],21],[[71,20],21],[[79,20],21],[[79,20],21],[71,4],[75,4],[79,4],[72,4],[78,4],[[]],[[],4],[69,4],[73,4],[77,4],[76,4],[70,69],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[80],[80],[80],[80],[80],[4,[[27,[81]]]],[69,[[27,[81]]]],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[83,[82,82]],17]],[84,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[84,6],[[5,[4]]]],[41,41],[85,85],[86,86],[84,84],[[]],[[]],[[]],[[]],[[],41],[[],87],[[],88],[[85,85],17],[[86,86],17],[41,12],[[41,20],21],[[85,20],21],[[86,20],21],[[84,20],21],[[84,20],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[85,24]],[[86,24]],[41,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[84,17],[41,17],[84,8],[[18,17],89],[[82,82,84],[[83,[82,82]]]],[17,41],[17,84],[[],87],[[],88],[41,84],[84,12],[[84,6],[[5,[4]]]],[84],[[89,84]],[[87,84]],[[88,84]],[84],[84,41],[84,86],[41,85],[[]],[[]],[[]],[[]],[[],31],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[84,[[27,[12]]]],[[41,12],41],[[41,3],[[5,[41,4]]]],[[41,17],41],[[41,85],41]],"c":[],"p":[[3,"Shift"],[3,"BoardBuilder"],[3,"Board"],[4,"Error"],[4,"Result"],[4,"Action"],[3,"DoveSet"],[3,"ActionsFwd"],[3,"ActionsBwd"],[4,"SurroundedStatus"],[3,"Rectangle"],[4,"Color"],[3,"ColorIter"],[4,"Dove"],[3,"DoveIter"],[15,"char"],[15,"bool"],[15,"usize"],[15,"i8"],[3,"Formatter"],[6,"Result"],[15,"u64"],[15,"str"],[8,"Hasher"],[3,"ActionsFwdIter"],[3,"ActionsBwdIter"],[4,"Option"],[3,"DoveSetIntoIter"],[3,"ActionsFwdIntoIter"],[3,"ActionsBwdIntoIter"],[3,"String"],[3,"TypeId"],[3,"BoardValueTree"],[3,"Keys"],[3,"Iter"],[3,"Values"],[4,"BoardValueKind"],[3,"BoardValue"],[3,"Interval"],[3,"PositionMapper"],[3,"GameRule"],[4,"Ordering"],[8,"Read"],[3,"LazyBoardLoader"],[6,"Result"],[3,"LazyRawBoardLoader"],[3,"BoardSet"],[3,"RawBoardSet"],[3,"Vec"],[8,"Debug"],[8,"Write"],[3,"Capacity"],[3,"Difference"],[3,"RawDifference"],[3,"Drain"],[3,"RawDrain"],[8,"IntoIterator"],[3,"Intersection"],[3,"RawIntersection"],[3,"Iter"],[3,"RawIter"],[8,"FnMut"],[3,"RawIntoIter"],[3,"RawSymmetricDifference"],[3,"RawUnion"],[3,"IntoIter"],[3,"SymmetricDifference"],[3,"Union"],[4,"BoardError"],[4,"ActionConvertError"],[4,"AnalysisError"],[4,"GameError"],[4,"BoardCreateErrorKind"],[4,"ActionPerformErrorKind"],[4,"EncodingErrorKind"],[4,"DecodingErrorKind"],[4,"GameRuleCreateErrorKind"],[4,"PlayingErrorKind"],[4,"ArgsValidationErrorKind"],[3,"Demand"],[8,"Error"],[8,"Agent"],[3,"Arena"],[3,"Game"],[4,"Judge"],[4,"GameStatus"],[3,"RandomAgent"],[3,"ConsoleAgent"],[3,"AnalystAgent"],[8,"ActionContainer"],[13,"EncodingError"],[13,"DecodingError"],[13,"ArgsValidationError"],[13,"ActionPerformError"],[13,"BoardCreateError"],[13,"GameRuleCreateError"],[13,"PlayingError"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
