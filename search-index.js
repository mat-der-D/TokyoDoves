var searchIndex = JSON.parse('{\
"tokyodoves":{"doc":"Crate Description","t":"NEIDDDDDDNDDNEDEDDDNNNNNNNDNNDENNLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFKLLLLLLLMLLLMLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCLLLCLLLLLLLLLLLLLLLLLLLLAFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMENENNEENNNNNNNNNENNNNNNNNNNNENENNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMNNNDENDENNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMNCENECECCNCCCDDNNDCCNNNNALLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["A","Action","ActionContainer","ActionsBwd","ActionsBwdIntoIter","ActionsBwdIter","ActionsFwd","ActionsFwdIntoIter","ActionsFwdIter","B","Board","BoardBuilder","Both","Color","ColorIter","Dove","DoveIter","DoveSet","DoveSetIntoIter","Green","H","M","Move","None","OneSide","Put","Rectangle","Red","Remove","Shift","SurroundedStatus","T","Y","add","array_macro","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_unchecked","check_action","check_action_bwd","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color_dove_to_char","contains","contains","contains","contains","count_doves_on_field","count_doves_on_field_of","default","default","dh","dove","doves_in_hand_of","doves_on_field_of","dv","empty","eq","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ssn","from_str","from_u16_bits","from_u64","from_u64_bits","game","hash","hash","hash","hash","hash","hash","hash","hmax","hmin","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","is_in_hand","is_on_field","iter","iter","iter","iter","legal_actions","legal_actions_bwd","len","len","len","len","len","len","liberty","liberty_of_boss","minimum_rectangle","neg","new","next","next","next","next","next","next","next","next_back","next_back","not","nth","nth","perform","perform_bwd","perform_bwd_copied","perform_copied","perform_unchecked","perform_unchecked_copied","player","position_in_rbcc","prune_outside_4x4","put_dove","remove_dove","shift","size","size_hint","size_hint","strum","strum_macros","sub","surrounded_status","swap_color","thiserror","to_4x4_matrix","to_framed_string","to_invariant_u64","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_simple_string","to_ssn","to_string","to_u64","tools","try_char_to_color_dove","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_4x4_matrix","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vmax","vmin","ActionConvertError","ActionPerformError","ActionPerformErrorType","AlreadyOnBoard","BoardCreateError","BoardCreateErrorType","BoardError","BossNotFound","BossNotFound","BossNotFound","ColorNotInferred","DoveDuplicated","DoveIsolated","DoveNotFound","DoveNotInferred","DoveNotOnBoard","GameRuleError","InitialBoardError","InvalidPosition","InvalidShift","MaskShiftError","NotOnBoard","NumberNotFollowAfterNEWS","ObstacleInRoute","OutOfField","PositionDuplicated","PositionOutOfRange","SSNDecodingError","SSNDecodingErrorType","SSNEncodingError","SSNEncodingErrorType","ThroughOuterField","ToBeIsolated","TriedToRemoveBoss","UnexpectedCharacter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","provide","provide","provide","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","error_type","error_type","action","error_type","error_type","BoardError","Draw","Draw","Game","GameError","GameFinishedError","GameRule","GameStatus","LastPlayer","NextPlayer","Ongoing","PlayerMismatchError","ProhibitedRemoveError","Win","WinnerJudgement","board","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","eq","eq","first_player","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_rule","hash","hash","initial_board","into","into","into","into","into","is_ongoing","is_remove_accepted","legal_actions","new","new","next_player","perform","provide","reset","rule","simultaneous_surrounding","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","winner","with_first_player","with_initial_board","with_is_remove_accepted","with_simultaneous_surrounding","action","error","game_status","BoardAlreadyFinished","BoardSet","BoardValue","BoardValueError","BoardValueErrorType","Capacity","CompareBoardValueError","Difference","Drain","DrawNotSupportedError","Intersection","IntoIter","Iter","LazyBoardLoader","LazyRawBoardLoader","Lose","LoseArgMustPositiveEven","PositionMapper","SymmetricDifference","Union","Unknown","UnknownNotSupported","Win","WinArgMustOdd","board_set","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compare_board_value","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_raw","map","new","new","next","next","provide","raw","raw_mut","to_owned","to_owned","to_owned","to_owned","to_string","try_create","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_next","try_next","type_id","type_id","type_id","type_id","type_id","type_id","error_type","BoardSet","Capacity","Difference","Drain","Intersection","IntoIter","Iter","RawBoardSet","RawDifference","RawDrain","RawIntersection","RawIntoIter","RawIter","RawSymmetricDifference","RawUnion","SymmetricDifference","Union","absorb","absorb","add","add_assign","bitand","bitand","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","contains","contains","default","default","default","difference","difference","drain","drain","extend","extend","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","insert","insert","intersection","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw","is_disjoint","is_disjoint","is_empty","is_empty","is_empty","is_subset","is_subset","is_superset","is_superset","iter","iter","len","len","len","load","load","load_filter","load_filter","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","raw","raw_mut","remove","remove","required_capacity","required_capacity","required_capacity_filter","required_capacity_filter","reserve","reserve","retain","retain","save","save","symmetric_difference","symmetric_difference","take","take","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","with_capacity","with_capacity"],"q":[[0,"tokyodoves"],[340,"tokyodoves::error"],[461,"tokyodoves::error::ActionConvertError"],[463,"tokyodoves::error::BoardError"],[466,"tokyodoves::game"],[566,"tokyodoves::game::GameError"],[569,"tokyodoves::tools"],[672,"tokyodoves::tools::CompareBoardValueError"],[673,"tokyodoves::tools::board_set"]],"d":["Represents <strong>A</strong>niki-hato, which can move to adjacent squares …","Actions players can perform in their turn.","Read-only <code>Sized</code> container of <code>Action</code>s.","An <code>ActionContainer</code> returned by <code>Board::legal_actions_bwd</code>","An <code>Iterator</code> returned by <code>ActionsBwd::into_iter</code>","An <code>Iterator</code> returned by <code>ActionsBwd::iter</code>","An <code>ActionContainer</code> returned by <code>Board::legal_actions</code>","An <code>Iterator</code> returned by <code>ActionsFwd::into_iter</code>","An <code>Iterator</code> returned by <code>ActionsFwd::iter</code>","Represents <strong>B</strong>oss-hato, which can move to adjacent squares …","An implementation of Tokyo Doves board based on bitboard …","A builder of <code>Board</code>","","Two colors of player, just like black and white in chess.","An iterator over the variants of Color","Six types of doves.","An iterator over the variants of Dove","Read-only <code>Sized</code> container of <code>Dove</code>s without duplication.","An <code>Iterator</code> returned by <code>DoveSet::into_iter</code>","","Represents <strong>H</strong>ajike-hato, which can move (or jump) like the …","Represents <strong>M</strong>amedeppo-bato, which can move to four …","Move <code>Color</code>’s <code>Dove</code> on the board toward <code>Shift</code> from its …","","","Put <code>Dove</code> from <code>Color</code>’s hand on the board at the position …","Rectangle with edges of <code>usize</code> coordinates.","","Remove <code>Color</code>’s <code>Dove</code> from the board (which returns to …","Difference between two squares.","An enum returned by <code>Board::surrounded_status</code>","Represents <strong>T</strong>otsu-hato, which can move forward, backward or …","Represents <strong>Y</strong>aibato, which can move to four adjacent …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if <code>action</code> is legal.","Check if backward <code>action</code> is legal.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if it contains the specified <code>Action</code>.","Returns <code>true</code> if it contains the specified <code>Dove</code>.","","","Counts the number of all doves on the field.","Counts the number of doves of the <code>player</code> on the field.","","","Horizontal shift. Positive (or negative) direction is on …","","Collects and returns the set of doves in the <code>player</code>’s …","Collects and returns the set of doves of the <code>player</code> on the …","Vertical shift. Positive (or negative) direction is on …","","","","","","","","","Error variants","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates <code>Action</code> from <code>&amp;str</code> in Standard Short Notation (SSN)","","Create <code>BoardBuilder</code> by indicating positions of doves in <code>u16</code>…","Alias of <code>from::&lt;u64&gt;</code>","Create <code>BoardBuilder</code> by indicating positions of doves in <code>u64</code>…","","","","","","","","","The maximum coordinate in horizontal direction","The minimum coordinate in horizontal direction","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns <code>true</code> if it is empty.","Returns <code>true</code> if it is empty.","","","Returns <code>true</code> if the <code>player</code>’s <code>dove</code> is in their hand.","Returns <code>true</code> if the <code>player</code>’s <code>dove</code> is on the field.","","","","","Collects and returns the set of all legal <code>Action</code>s for the …","Collects and returns the set of all legal backward-<code>Action</code>s …","Returns the number of elements.","Returns the number of elements.","","","","","Returns “liberty” of <code>player</code>’s <code>dove</code>, where liberty is …","Returns “liberty” of <code>player</code>’s boss-hato.","Returns the minimum rectangle that contains all doves on …","","","","","","","","","","","","","","","Performs the specified <code>action</code> to <code>self</code>.","Performs the specified backward action to <code>self</code>.","Returns the result of performing the specified backward …","Returns the result of performing the specified action to …","Performs <code>action</code> to <code>self</code> (without distinction between …","Returns the result of performing the specified action to …","","Returns the position of specified player and dove in …","","","","","Calculates the lengths of horizontal and vertical edges.","","","","","","Get info whether bosses are surrounded or not","Swaps the colors red and green.","","Returns 4x4 matrix (array of array) representing the board.","Returns a <code>String</code> expression with a frame.","Returns a light expression of <code>u64</code> with a universality.","","","","","","","","","","","","","","","Converts <code>self</code> into <code>String</code> in Standard Short Notation (SSN)","","Returns a light expression of 64 bits.","Convenient tools to analyze the game","","","","","","","","","","","","","","","","","","","","","Alias of <code>try_from::&lt;..&gt;</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum coordinate in vertical direction","The minimum coordinate in vertical direction","Errors on conversion between <code>Action</code> and string in SSN","","Types of errors on performing <code>Action</code>","","","Types of errors on creating <code>Board</code>","Errors associated to <code>Board</code>","","","","","","","","","","Errors associated to <code>GameRule</code>","","","","","","","","","","","","Types of errors on conversion of <code>Action</code> from string in SSN","","Types of errors on conversion of <code>Action</code> into string in SSN","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","It is a draw game","The game has already finished; it was a draw game","A struct that provides methods to play Tokyo Doves games …","Errors associated to <code>Game</code>","","Some kinds of detailed rules","Status of the game","The player just before the event is treated as the winner","The player just after the event is treated as the winner","The game is ongoing","","","The game has already finished; one player defeated the …","Judgement of winner on some event","Get a reference to board","","","","","","","","","","","","","","","","","","","","","Returns the default value.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs <code>Game</code> with a specified <code>rule</code>","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the game is ongoing","","Returns an <code>ActionContainer</code> of legal <code>Action</code>s.","Constructs <code>GameRule</code> object","Constructs <code>Game</code>","Get a reference to the next player","Performs <code>action</code>.","","Reset <code>Game</code> to the initial state","Get a reference to game rule","","Get a reference to status","","","","","","","","","","","","","","","","","","","","","","","Returns winner.","Update the player moving firstly in the beginning of the …","Update initial_board of <code>GameRule</code>","Update whether accept <code>Remove</code> in the game or not","Update judgement rule when both bosses are surrounded …","","","","","","Value of board","","","","","","","","","","","","","<code>Lose(n)</code> means the player will lose in <code>n</code> turns at most","","","","","Cannot detect win or lose","","<code>Win(n)</code> means the player will win in <code>n</code> turns at least","","","","","","","","","","","","","","","","","","","","","","","Compare <code>value</code> and the value of <code>board</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[14,0,0,0,0,0,0,0,0,14,0,0,10,0,0,0,0,0,0,12,14,14,6,10,10,6,0,12,6,0,0,14,14,1,0,28,25,29,26,30,6,7,8,9,10,3,11,2,12,13,14,15,1,28,25,29,26,30,6,7,8,9,10,3,11,2,12,13,14,15,1,2,2,3,3,6,7,8,9,10,3,11,2,12,13,14,15,1,6,7,8,9,10,3,11,2,12,13,14,15,1,0,74,7,8,9,3,3,3,2,1,6,3,3,1,2,6,10,3,11,12,14,1,0,6,7,8,9,10,3,3,11,2,12,13,14,15,1,28,25,29,26,30,6,7,8,9,10,3,11,2,2,2,2,12,13,14,15,1,6,2,2,2,2,0,6,10,3,11,12,14,1,11,11,8,9,28,25,29,26,30,6,7,8,9,10,3,11,2,12,13,14,15,1,28,25,29,26,30,7,8,9,13,15,74,7,8,9,3,3,8,9,12,14,3,3,74,7,8,9,13,15,3,3,3,1,2,28,25,29,26,30,13,15,13,15,12,13,15,3,3,3,3,3,3,6,3,2,2,2,6,11,13,15,0,0,1,3,3,0,3,3,3,6,7,8,9,10,3,11,2,12,13,14,15,1,3,6,3,3,0,0,28,25,29,26,30,6,7,8,9,10,3,11,2,2,12,13,14,15,1,2,28,25,29,26,30,6,7,8,9,10,3,11,2,12,13,14,15,1,28,25,29,26,30,6,7,8,9,10,3,11,2,12,13,14,15,1,11,11,0,4,0,35,4,0,0,34,36,37,37,34,34,36,37,37,0,33,35,35,4,35,37,35,35,34,34,23,0,23,0,35,35,35,37,33,4,34,35,23,36,37,33,4,34,35,23,36,37,33,4,34,35,23,36,37,33,4,34,35,23,36,37,33,33,4,4,34,35,23,23,36,37,33,4,34,35,23,36,37,33,4,34,35,23,36,37,33,4,23,33,4,34,35,23,36,37,33,4,23,33,4,34,35,23,36,37,33,4,34,35,23,36,37,33,4,34,35,23,36,37,75,76,77,78,77,40,42,43,0,0,40,0,0,42,42,43,40,40,43,0,39,40,41,42,43,39,40,41,42,43,39,40,41,42,43,39,40,41,42,43,39,41,42,43,41,40,40,41,42,43,39,39,40,41,42,43,39,39,42,43,41,40,41,42,43,39,39,41,39,41,39,39,39,40,39,39,41,39,40,41,42,43,39,40,39,40,41,42,43,39,40,41,42,43,39,40,41,42,43,39,39,41,41,41,41,79,80,81,45,0,0,45,0,0,0,0,0,45,0,0,0,0,0,47,46,0,0,0,47,46,47,46,0,44,45,46,47,51,52,44,45,46,47,51,52,44,45,46,47,44,45,46,47,0,44,45,45,46,47,51,52,44,45,46,47,51,51,52,44,45,46,47,51,52,51,52,51,44,51,52,51,52,45,51,51,44,45,46,47,45,44,44,45,46,47,51,52,44,45,46,47,51,52,51,52,44,45,46,47,51,52,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,55,56,56,54,55,54,55,54,55,65,67,60,58,68,63,69,56,54,70,59,64,57,71,62,72,55,65,67,60,58,68,63,69,56,54,70,59,64,57,71,62,72,55,54,55,54,55,56,54,55,56,54,55,54,55,56,54,55,54,55,54,55,54,55,56,54,55,65,67,60,58,68,63,69,56,54,54,70,59,64,57,71,62,72,55,54,55,54,55,54,55,65,67,60,58,68,63,69,56,54,70,59,64,57,71,62,72,55,65,67,60,58,68,63,69,54,70,59,64,57,71,62,72,55,54,54,55,56,54,55,54,55,54,55,54,55,56,54,55,54,55,54,55,56,54,55,65,67,60,58,68,63,69,70,59,64,57,71,62,72,54,54,54,55,54,55,54,55,54,55,54,55,54,55,54,55,54,55,56,54,55,65,67,60,58,68,63,69,56,54,70,59,64,57,71,62,72,55,65,67,60,58,68,63,69,56,54,70,59,64,57,71,62,72,55,65,67,60,58,68,63,69,56,54,70,59,64,57,71,62,72,55,54,55,54,55],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[5,[3,4]]]],[2,3],[[3,6],[[5,[4]]]],[[3,6],[[5,[4]]]],[6,6],[7,7],[8,8],[9,9],[10,10],[3,3],[11,11],[2,2],[12,12],[13,13],[14,14],[15,15],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,14],16],[6,17],[[7,14],17],[[8,6],17],[[9,6],17],[3,18],[[3,12],18],[[],3],[[],2],0,[6,14],[[3,12],7],[[3,12],7],0,[[],2],[[6,6],17],[[10,10],17],[[3,3],17],[[11,11],17],[[12,12],17],[[14,14],17],[[1,1],17],0,[[6,19],20],[[7,19],20],[[8,19],20],[[9,19],20],[[10,19],20],[[3,19],20],[[3,19],20],[[11,19],20],[[2,19],20],[[12,19],20],[[13,19],20],[[14,19],20],[[15,19],20],[[1,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[22,3],[[5,[6,23]]]],[22,[[5,[2]]]],[[],2],[21,2],[[],2],0,[[6,24]],[[10,24]],[[3,24]],[[11,24]],[[12,24]],[[14,24]],[[1,24]],0,0,[[8,18]],[[9,18]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[8],[9],[[]],[[]],[[],17],[7,17],[8,17],[9,17],[[3,12,14],17],[[3,12,14],17],[8,25],[9,26],[[],13],[[],15],[[3,12,17,17,17],8],[[3,12,17,17,17],9],[[],18],[7,18],[8,18],[9,18],[13,18],[15,18],[[3,12,14],[[27,[18]]]],[[3,12],18],[3,11],[1],[[],2],[28,27],[25,27],[29,27],[26,27],[30,27],[13,27],[15,27],[13,27],[15,27],[12],[[13,18],27],[[15,18],27],[[3,6],[[5,[4]]]],[[3,6],[[5,[4]]]],[[3,6],[[5,[3,4]]]],[[3,6],[[5,[3,4]]]],[[3,6]],[[3,6],3],[6,12],[[3,12,14],[[27,[1]]]],[2,2],[[2,18,18,12,14],2],[[2,12,14],2],[6,[[27,[1]]]],0,[13],[15],0,0,[[1,1]],[3,10],[3],0,[3],[3,31],[[3,12],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,16,22],31],[[6,3],[[5,[31,23]]]],[[],31],[3,21],0,[16,27],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],[[5,[2]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],[[5,[2,4]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[4,4],[34,34],[35,35],[23,23],[36,36],[37,37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[33,19],20],[[33,19],20],[[4,19],20],[[4,19],20],[[34,19],20],[[35,19],20],[[23,19],20],[[23,19],20],[[36,19],20],[[37,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38],[38],[38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[],31],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[39,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40,40],[41,41],[42,42],[43,43],[39,39],[[]],[[]],[[]],[[]],[[]],[[],41],[[42,42],17],[[43,43],17],[41,12],[[40,19],20],[[40,19],20],[[41,19],20],[[42,19],20],[[43,19],20],[[39,19],20],[[39,19],20],[[]],[[]],[[]],[[]],[[]],[41,39],[[42,24]],[[43,24]],[41,3],[[]],[[]],[[]],[[]],[[]],[39,17],[41,17],[39,8],[17,41],[17,39],[39,12],[[39,6],[[5,[40]]]],[38],[39],[39,41],[41,42],[39,43],[[]],[[]],[[]],[[]],[[]],[[],31],[[],31],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],32],[[],32],[[],32],[[],32],[[],32],[39,[[27,[12]]]],[[41,12],41],[[41,3],[[5,[41,33]]]],[[41,17],41],[[41,42],41],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,44],[45,45],[46,46],[47,47],[[]],[[]],[[]],[[]],[[47,3,12,41],[[5,[48,45]]]],[[44,19],20],[[45,19],20],[[45,19],20],[[46,19],20],[[47,19],20],[[[51,[[0,[49,50]]]],19],20],[[[52,[[0,[49,50]]]],19],20],[[]],[[]],[[]],[[]],[[[52,[49]]],[[51,[49]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[49]]],[[52,[49]]]],[[44,18,18],18],[49,[[51,[49]]]],[49,[[52,[49]]]],[[[51,[49]]],27],[[[52,[49]]],27],[38],[[[51,[49]]],[[52,[49]]]],[[[51,[49]]],[[52,[49]]]],[[]],[[]],[[]],[[]],[[],31],[[18,18],[[27,[44]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[51,[49]]],[[53,[[27,[3]]]]]],[[[52,[49]]],[[53,[[27,[21]]]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[54,54]],[[55,55]],[[56,56]],[[56,56]],[[54,54]],[[55,55]],[[54,54]],[[55,55]],[[54,54]],[[55,55]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,56],[55,56],[54],[55],[56,56],[54,54],[55,55],[[]],[[]],[[]],[[54,3],17],[[55,21],17],[[],56],[[],54],[[],55],[[54,54],57],[[55,55],58],[54,59],[55,60],[[54,61]],[[55,61]],[[56,19],20],[[54,19],20],[[55,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[55,54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[61,54],[61,55],[[54,3]],[[55,21]],[[54,54],62],[[55,55],63],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[55],[54,55],[[54,54],17],[[55,55],17],[56,17],[54,17],[55,17],[[54,54],17],[[55,55],17],[[54,54],17],[[55,55],17],[54,64],[55,65],[56,18],[54,18],[55,18],[[54,49],53],[[55,49],53],[[54,49,66],53],[[55,49,66],53],[[],56],[[],54],[[],55],[65,27],[67,27],[60,27],[58,27],[68,27],[63,27],[69,27],[70,27],[59,27],[64,27],[57,27],[71,27],[62,27],[72,27],[54,55],[54,55],[[54,3],17],[[55,21],17],[49,56],[49,56],[[49,66],56],[[49,66],56],[[54,56]],[[55,56]],[[54,66]],[[55,66]],[[54,73],53],[[55,73],53],[[54,54],71],[[55,55],68],[[54,3],[[27,[3]]]],[[55,21],[[27,[21]]]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[54,54],72],[[55,55],69],[56,54],[56,55]],"c":[],"p":[[3,"Shift"],[3,"BoardBuilder"],[3,"Board"],[4,"BoardError"],[4,"Result"],[4,"Action"],[3,"DoveSet"],[3,"ActionsFwd"],[3,"ActionsBwd"],[4,"SurroundedStatus"],[3,"Rectangle"],[4,"Color"],[3,"ColorIter"],[4,"Dove"],[3,"DoveIter"],[15,"char"],[15,"bool"],[15,"usize"],[3,"Formatter"],[6,"Result"],[15,"u64"],[15,"str"],[4,"ActionConvertError"],[8,"Hasher"],[3,"ActionsFwdIter"],[3,"ActionsBwdIter"],[4,"Option"],[3,"DoveSetIntoIter"],[3,"ActionsFwdIntoIter"],[3,"ActionsBwdIntoIter"],[3,"String"],[3,"TypeId"],[4,"GameRuleError"],[4,"BoardCreateErrorType"],[4,"ActionPerformErrorType"],[4,"SSNEncodingErrorType"],[4,"SSNDecodingErrorType"],[3,"Demand"],[3,"Game"],[4,"GameError"],[3,"GameRule"],[4,"WinnerJudgement"],[4,"GameStatus"],[3,"PositionMapper"],[4,"CompareBoardValueError"],[4,"BoardValueErrorType"],[4,"BoardValue"],[15,"i8"],[8,"Read"],[8,"Debug"],[3,"LazyBoardLoader"],[3,"LazyRawBoardLoader"],[6,"Result"],[3,"BoardSet"],[3,"RawBoardSet"],[3,"Capacity"],[3,"Difference"],[3,"RawDifference"],[3,"Drain"],[3,"RawDrain"],[8,"IntoIterator"],[3,"Intersection"],[3,"RawIntersection"],[3,"Iter"],[3,"RawIter"],[8,"FnMut"],[3,"RawIntoIter"],[3,"RawSymmetricDifference"],[3,"RawUnion"],[3,"IntoIter"],[3,"SymmetricDifference"],[3,"Union"],[8,"Write"],[8,"ActionContainer"],[13,"SSNEncodingError"],[13,"SSNDecodingError"],[13,"ActionPerformError"],[13,"BoardCreateError"],[13,"ProhibitedRemoveError"],[13,"BoardError"],[13,"GameFinishedError"],[13,"BoardValueError"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
