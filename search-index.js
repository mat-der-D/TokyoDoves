var searchIndex = JSON.parse('{\
"tokyodoves":{"doc":"Crate Description","t":"NEIDDDDDDNDDDENEDEDDDNNNNNNNNDNNDNENNLACLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFKLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMDEDNDNSSDNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLFFLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCDDALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDDDDDDDDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNENENNENEENNNNNNNENNNNNNNEENENNNENNNNNNNNNNENNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMIDDDNNDDEDEENNNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["A","Action","ActionContainer","ActionsBwd","ActionsBwdIntoIter","ActionsBwdIter","ActionsFwd","ActionsFwdIntoIter","ActionsFwdIter","B","Board","BoardBuilder","BoardDisplay","BoardDisplayFormat","Both","Color","ColorIter","Dove","DoveIter","DoveSet","DoveSetIntoIter","Framed","Green","H","M","Move","None","OneSide","Put","Rectangle","Red","Remove","Shift","Simple","SurroundedStatus","T","Y","add","analysis","array_macro","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_unchecked","check_action","check_action_bwd","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collections","color_dove_to_char","contains","contains","contains","contains","count_doves_on_field","count_doves_on_field_of","default","default","default","dh","dh_mut","display","display_as_ssn","display_as_ssn","dove","doves_in_hand_of","doves_on_field_of","dv","dv_mut","empty","eq","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_u16_bits","from_u64","from_u64_bits","game","hash","hash","hash","hash","hash","hash","hash","hmax","hmin","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","is_in_hand","is_on_field","iter","iter","iter","iter","legal_actions","legal_actions_bwd","len","len","len","len","len","len","liberty","liberty_of_boss","minimum_rectangle","neg","new","new","new","next","next","next","next","next","next","next","next_back","next_back","not","nth","nth","perform","perform_bwd","perform_bwd_copied","perform_copied","perform_unchecked","perform_unchecked_copied","player","position_in_rbcc","prune_outside_4x4","put_dove","remove_dove","shift","size","size_hint","size_hint","strum","strum_macros","sub","surrounded_status","swap_color","thiserror","to_4x4_matrix","to_framed_string","to_invariant_u64","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_simple_string","to_string","to_string","to_string","to_u64","try_char_to_color_dove","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_4x4_matrix","try_from_ssn","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_ssn","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vmax","vmin","with_format","delimiter","empty","BoardValue","BoardValueKind","BoardValueTree","Finished","Interval","Lose","MAX","MIN","PositionMapper","Standard","TreeDisplay","TreeDisplayFormat","Unknown","Win","actions","actions_children","board","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","child","children","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compare_board_value","contains","create_checkmate_tree","create_checkmate_tree_with_value","default","default","default","depth","display","eq","eq","eq","evaluate_board","find_best_actions","finished","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","hash","increment","into","into","into","into","into","into","into","is_finished","is_good_for_puzzle","is_leaf","is_lose","is_unknown","is_win","kind","left","lose","map","new","num_children","partial_cmp","partial_cmp","player","right","save_as_dot","single","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_create","try_decrement","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_unwrap","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unknown","unwrap","value","win","with_format","BoardSet","Capacity","LazyBoardLoader","LazyRawBoardLoader","board_set","borrow","borrow","borrow_mut","borrow_mut","contains","contains","contains_all","contains_all","fmt","fmt","from","from","from","from","into","into","into_iter","into_iter","into_raw","new","new","next","next","raw","raw_mut","try_from","try_from","try_into","try_into","try_next","try_next","type_id","type_id","BoardSet","Capacity","Difference","Drain","Intersection","IntoIter","Iter","RawBoardSet","RawDifference","RawDrain","RawIntersection","RawIntoIter","RawIter","RawSymmetricDifference","RawUnion","SymmetricDifference","Union","absorb","absorb","absorb_drained","absorb_drained","add","add_assign","bitand","bitand","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","contains","contains","default","default","default","difference","difference","drain","drain","eq","eq","eq","extend","extend","extend","extend","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_raw","insert","insert","intersection","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw","is_disjoint","is_disjoint","is_empty","is_empty","is_empty","is_subset","is_subset","is_superset","is_superset","iter","iter","len","len","len","load","load","load_filter","load_filter","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","raw","raw_mut","remove","remove","required_capacity","required_capacity","required_capacity_filter","required_capacity_filter","reserve","reserve","retain","retain","save","save","shrink_to_fit","shrink_to_fit","sub","sub","symmetric_difference","symmetric_difference","take","take","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","with_capacity","with_capacity","ActionConvertError","ActionConvertError","ActionPerformError","ActionPerformErrorKind","AlreadyOnBoard","AnalysisError","AnalysisError","ArgsValidationError","ArgsValidationErrorKind","BoardCreateError","BoardCreateErrorKind","BoardError","BoardError","BoardValueMismatch","BossNotFound","BossNotFound","BossNotFound","ColorNotInferred","DecodingError","DecodingErrorKind","DoveDuplicated","DoveIsolated","DoveNotFound","DoveNotInferred","DoveNotOnBoard","DrawJudge","EncodingError","EncodingErrorKind","Error","FinishedGameBoard","GameError","GameError","GameFinished","GameRuleCreateError","GameRuleCreateErrorKind","InitialBoardError","InvalidPosition","InvalidShift","MaskShiftError","NotOnBoard","NumberNotFollowAfterNEWS","ObstacleInRoute","OutOfField","PlayerMismatch","PlayingError","PlayingErrorKind","PositionDuplicated","PositionOutOfRange","ProhibitedRemove","ThroughOuterField","ToBeIsolated","TriedToRemoveBoss","UnexpectedCharacter","UnsupportedValue","as_action_convert_error","as_analysis_error","as_board_error","as_game_error","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","provide","provide","provide","provide","provide","source","source","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","kind","kind","kind","action","kind","kind","kind","kind","Agent","AnalystAgent","Arena","ConsoleAgent","Draw","Draw","Game","GameDisplay","GameDisplayFormat","GameRule","GameStatus","Judge","LastWins","NextWins","Ongoing","RandomAgent","Standard","Win","auto_play","board","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_action","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","display","eq","eq","first_player","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","hash","initial_board","into","into","into","into","into","into","into","into","into","into","is_ongoing","is_remove_accepted","legal_actions","new","new","new","new","new","new","new_with_rule","next_player","perform","play","play","play","play","reset","rule","status","suicide_atk_judge","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","winner","with_first_player","with_format","with_initial_board","with_is_remove_accepted","with_suicide_atk_judge"],"q":["tokyodovestokyodoves::BoardDisplayFormat","","tokyodoves::analysis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokyodoves::collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokyodoves::collections::board_settokyodoves::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokyodoves::error::ActionConvertError","","tokyodoves::error::AnalysisError","tokyodoves::error::BoardError","","","tokyodoves::error::GameError","","tokyodoves::game","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Represents <strong>A</strong>niki-hato, which can move to adjacent squares …","Actions players can perform in their turn.","A trait to be implemented to readable containers of <code>Action</code>…","A read-only <code>ActionContainer</code> returned by the …","An <code>Iterator</code> returned by the <code>into_iter</code> method on <code>ActionsBwd</code>.","An <code>Iterator</code> returned by <code>iter</code> method on <code>ActionsBwd</code>.","A read-only <code>ActionContainer</code> returned by the <code>legal_actions</code> …","An <code>Iterator</code> returned by the <code>into_iter</code> method on <code>ActionsFwd</code>.","An <code>Iterator</code> returned by the <code>iter</code> method on <code>ActionsFwd</code>.","Represents <strong>B</strong>oss-hato, which can move to adjacent squares …","A board of Tokyo Doves based on bitboard techniques.","A builder of <code>Board</code>.","A struct to configure display styles of <code>Board</code>.","Formats of display used by <code>BoardDisplay</code>.","Both bosses are surrounded.","Two colors of players.","An iterator over the variants of Color","Six types of doves.","An iterator over the variants of Dove","A read-only set of <code>Dove</code>s.","An <code>Iterator</code> returned by the <code>into_iter</code> method on <code>DoveSet</code>.","The first board will be displayed as below:","","Represents <strong>H</strong>ajike-hato, which can move (or jump) like the …","Represents <strong>M</strong>amedeppo-bato, which can move to four …","Move <code>Color</code>’s <code>Dove</code> on the board toward <code>Shift</code> from its …","None of bosses are surrounded.","Only one boss is surrounded.","Put <code>Dove</code> from <code>Color</code>’s hand on the board at the position …","A rectangle with edges of <code>usize</code> coordinates.","","Remove <code>Color</code>’s <code>Dove</code> from the board (which returns to …","A struct representing difference between two squares.","The first board will be displayed as below (for <code>empty=&#39;-&#39;</code>, …","Represents whether two bosses are surrounded or not.","Represents <strong>T</strong>otsu-hato, which can move forward, backward or …","Represents <strong>Y</strong>aibato, which can move to four adjacent …","Creates a new <code>Shift</code> by adding each <code>dv</code> and <code>dh</code> of <code>self</code> and …","Convenient tools to analyze the game","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>Ok(())</code> if the given <code>action</code> is legal.","Check if backward <code>action</code> is legal in backward direction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A module containing a light <code>Board</code> container <code>BoardSet</code> and …","Converts a pair of <code>Color</code> and <code>Dove</code> to <code>char</code>.","Returns <code>true</code> if it contains the specified <code>Action</code>.","Returns <code>true</code> if the set contains a dove.","","","Counts the number of all doves on the field.","Counts the number of doves of the <code>player</code> on the field.","","","","Returns a reference to the vertical difference of …","Returns a mutable reference to the vertical difference of …","Returns <code>BoardDisplay</code> to display the board.","","","","Collects and returns the set of doves in the <code>player</code>’s …","Collects and returns the set of doves of the <code>player</code> on the …","Returns a reference to the horizontal difference of …","Returns a mutable reference to the horizontal difference …","","","","","","","","","Error variants","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Create <code>BoardBuilder</code> by indicating positions of doves in <code>u16</code>…","Alias of <code>from::&lt;u64&gt;</code>","Create <code>BoardBuilder</code> by indicating positions of doves in <code>u64</code>…","Convenient tools for playing games","","","","","","","","The maximum coordinate in horizontal direction","The minimum coordinate in horizontal direction","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns <code>true</code> if it is empty.","Returns <code>true</code> if the set contains no elements.","","","Returns <code>true</code> if the <code>player</code>’s <code>dove</code> is in their hand.","Returns <code>true</code> if the <code>player</code>’s <code>dove</code> is on the field.","","","","","Collects and returns all legal <code>Action</code>s performed by the …","Collects and returns all <code>Action</code>s legal in backward …","Returns the number of elements.","Returns the number of elements in the set.","","","","","Returns “liberty” of <code>player</code>’s <code>dove</code>, where liberty is …","Returns “liberty” of <code>player</code>’s boss-hato.","Returns the minimum rectangle that contains all doves on …","Creates a new <code>Shift</code> by negating each <code>dv</code> and <code>dh</code> of <code>self</code>.","Creates <code>Board</code> at the beginning of the game.","","Constructs <code>Shift</code>.","","","","","","","","","","","","","Performs the specified <code>action</code> to <code>self</code>.","Performs the specified action to <code>self</code>. The action is …","Returns the result of the <code>perform_bwd</code> method without …","Returns the result of the <code>perform</code> method without changing …","Performs <code>action</code> to <code>self</code> without legality check.","Returns the result of the <code>perform_unchecked</code> method without …","","Returns the position of specified player and dove in …","","","","","Calculates the lengths of horizontal and vertical edges.","","","","","Creates a new <code>Shift</code> by subtracting each <code>dv</code> and <code>dh</code> of <code>rhs</code> …","Returns information about whether bosses are surrounded or …","Swaps the colors red and green.","","Returns 4x4 matrix (array of array) representing the board.","Returns a <code>String</code> expression with a frame.","Returns a light expression of <code>u64</code> invariant under …","","","","","","","","","","","","","","","","","","","","","Returns a simple <code>String</code> expression.","","","","Returns a light expression of a <code>Board</code> in <code>u64</code>.","Converts <code>char</code> to a pair of <code>Color</code> and <code>Dove</code>.","","","","","","","","","","","","","","","","","","","","","","Alias of <code>try_from::&lt;..&gt;</code>","Creates <code>Action</code> from <code>&amp;str</code> in Standard Short Notation (SSN)","","","","","","","","","","","","","","","","","","","","","Converts <code>self</code> into <code>String</code> in Standard Short Notation (SSN)","","","","","","","","","","","","","","","","","","","","","The maximum coordinate in vertical direction","The minimum coordinate in vertical direction","Configures what kind of format is used.","","","Value of <code>Board</code>.","Kinds of <code>BoardValue</code>","A tree structure that contains <code>Board</code> and <code>BoardValue</code> on its …","","A struct representing closed interval between two …","","Win(1)","Lose(2)","A mapping of positions used to canonicalize functions of a …","","A struct to configure display styles of <code>BoardValueTree</code>.","Formats of display used by <code>TreeDisplay</code>.","","","Returns an <code>Iterator</code> that iterates over all <code>Action</code>s …","Returns an <code>Iterator</code> that iterates all pairs of <code>Action</code> and …","Returns <code>Board</code> at the root node.","","","","","","","","","","","","","","","Returns a reference to a child tree associated to the …","Returns an <code>Iterator</code> that iterates over all children.","","","","","","","","","","","","","","","Compares the value of specified <code>Board</code> to a given <code>BoardValue</code>…","Returns if a given value is between left and right.","Creates an <code>BoardValueTree</code> that describes routes to ends of …","Creates an <code>BoardValueTree</code> that describes routes to ends of …","","","","Returns the depth of the tree, i.e., the longest steps …","Returns <code>TreeDisplay</code> to display <code>self</code>.","","","","Calculates a possible range of <code>BoardValue</code> of specified …","Collects the best <code>Action</code>s by <code>BoardValue</code>.","Creates finished value.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the next value of a series below:","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>self</code> is finished.","Returns <code>true</code> if the tree is a single road during the first …","Returns <code>true</code> if it is a leaf node, i.e., it has no …","Returns <code>true</code> if <code>self</code> is lose.","Returns <code>true</code> if <code>self</code> is unknown.","Returns <code>true</code> if <code>self</code> is win.","Returns the kind of the value.","Returns a reference to the left end value.","Creates lose value.","","Creates new object.","Counts the number of children.","","","Returns a reference to the player <code>Color</code> at the root node.","Returns a reference to the right end value.","Saves the tree as a file in DOT language.","Returns one value in the interval if left and right values …","","","","","","","","","","","","","Returns “next” values of a series below:","","","","","","","","","","","","","","","Tries to get the number in win or lose.","","","","","","","","Creates unknown value.","Get the number in win or lose.","Returns a reference to the <code>BoardValue</code> at the root node.","Creates win value.","","","","A utility to load <code>Board</code>s in a lazy way from the binary file","A struct almost the same as <code>LazyBoardLoader</code>, except that …","A module containing a light <code>Board</code> container <code>BoardSet</code> and …","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","A light set of <code>Board</code>s.","A capacity, i.e., what size of memory is allocated by …","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>BoardSet</code>.","A lazy iterator producing elements in the intersection of …","An owing iterator over the items of a <code>BoardSet</code>.","An iterator over the items of a <code>BoardSet</code>.","A set of <code>u64</code> built in <code>BoardSet</code>.","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>RawBoardSet</code>.","A lazy iterator producing elements in the intersection of …","An owing iterator over the items of a <code>RawBoardSet</code>.","An iterator over the items of a <code>RawBoardSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>BoardSet</code>…","Captures the ownership of the given set and absorb all …","Captures the ownership of the given set and absorb all …","Absorb all elements drained from the given set. The …","Absorb all elements drained from the given set. The …","Creates a new capacity by adding the capacities of <code>self</code> …","Adds the capacity of <code>rhs</code> to that of <code>self</code>.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new <code>BoardSet</code>.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>BoardSet</code>.","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>RawBoardSet</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>Capacity</code> of the set.","Returns the <code>Capacity</code> of the set.","Clears the set, removing all values.","Clears the set, removing all values.","","","","","","","Returns <code>true</code> if the set contains a board.","Returns <code>true</code> if the set contains a value.","","","","Visits the boards representing the difference, i.e., the …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements as an iterator. …","Clears the set, returning all elements as an iterator. …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Creates the set that has a <code>RawBoardSet</code> internally.","Adds a board to the set.","Adds a value to the set.","Visits the boards representing the intersection, i.e., the …","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the internal <code>RawBoardSet</code>.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if no capacity.","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","An iterator visiting all elements in arbitrary order. The …","Returns the number of <code>Board</code>s (or <code>u64</code>s) the <code>BoardSet</code> (or …","Returns the number of elements in the set.","Returns the number of elements in the set.","Inserts all elements given by <code>reader</code> into <code>self</code>.","Inserts all elements given by <code>reader</code> into <code>self</code>.","Inserts all elements (<code>e</code>) given by <code>reader</code> under the …","Inserts all elements (<code>e</code>) given by <code>reader</code> under the …","Returns an empty capacity.","Creates an empty <code>BoardSet</code>.","Creates an empty <code>BoardSet</code>.","","","","","","","","","","","","","","","Returns a reference to the internal <code>RawBoardSet</code>.","Returns a mutable reference to the internal <code>RawBoardSet</code>.","Removes a board from the set. Returns whether the board …","Removes a value from the set. Returns whether the value …","Returns <code>Capacity</code> required to load all elements specified …","Returns <code>Capacity</code> required to load all elements specified …","Returns <code>Capacity</code> required to load all elements (<code>e</code>) …","Returns <code>Capacity</code> required to load all elements (<code>e</code>) …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Writes all elements in the set to <code>writer</code>. The saved data …","Writes all elements in the set to <code>writer</code>. The saved data …","Shrinks the capacity of the set as much as possible.","Shrinks the capacity of the set as much as possible.","Returns the difference of <code>self</code> and <code>rhs</code> as a new <code>BoardSet</code>.","Returns the difference of <code>self</code> and <code>rhs</code> as a new <code>RawBoardSet</code>…","Visits the boards representing the symmetric difference, …","Visits the values representing the symmetric difference, …","Removes and returns the board in the set, if any, that is …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Visits the boards representing the union, i.e., all the …","Visits the values representing the union, i.e., all the …","Creates an empty <code>BoardSet</code> with at least the specified …","Creates an empty <code>BoardSet</code> with at least the specified …","Errors on conversion between <code>Action</code> and string in SSN","","","Error kinds on performing <code>Action</code>","","Error variants on analysis for games","","","Error kinds on validation of arguments","","Error kinds on creating <code>Board</code>","Errors associated to <code>Board</code>","","","","","","","","Error kinds on conversion of <code>Action</code> from string in SSN","","","","","","","","Error kinds on conversion of <code>Action</code> into string in SSN","Root of all errors in this crate","","Errors associated to <code>Game</code>","","","","Error kinds on creating <code>GameRule</code>","","","","","","","","","","","Error kinds that may occur during game playing","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","It is a draw game","The game has already finished; it was a draw game","A struct that provides methods to play Tokyo Doves games …","","","Some kinds of detailed rules","Status of the game","Judgement of winner on some event","The player just before the event is treated as the winner","The player just after the event is treated as the winner","The game is ongoing","","","The game has already finished; one player defeated the …","","Get a reference to board","","","","","","","","","","","","","","","","","","","","","Checks if the specified <code>Action</code> is legal","","","","","","","","","","","","","Returns the default value.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the game is ongoing","","Returns an <code>ActionContainer</code> of legal <code>Action</code>s.","","","Constructs <code>GameRule</code> object","Constructs <code>Game</code>","","","Constructs <code>Game</code> with a specified <code>rule</code>","Get a reference to the next player","Performs specified <code>Action</code>.","","","","","Reset <code>Game</code> to the initial state","Get a reference to game rule","Get a reference to status","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns winner.","Update the player moving firstly in the beginning of the …","","Update initial_board of <code>GameRule</code>","Update whether accept <code>Remove</code> in the game or not","Update judgement rule when both bosses are surrounded …"],"i":[21,0,0,0,0,0,0,0,0,21,0,0,0,0,17,0,0,0,0,0,0,9,19,21,21,6,17,17,6,0,19,6,0,9,0,21,21,1,0,0,6,7,8,9,10,11,12,13,14,15,16,17,3,18,2,19,20,21,22,1,6,7,8,9,10,11,12,13,14,15,16,17,3,18,2,19,20,21,22,1,2,2,3,3,6,7,8,9,10,11,12,13,14,15,16,17,3,18,2,19,20,21,22,1,6,7,8,9,10,11,12,13,14,15,16,17,3,18,2,19,20,21,22,1,0,0,90,7,11,14,3,3,9,3,2,1,1,3,11,14,6,3,3,1,1,2,6,17,3,18,19,21,1,0,6,7,8,9,10,10,11,12,13,14,15,16,17,3,3,18,2,19,19,20,21,22,1,6,7,8,9,10,11,12,13,14,15,16,17,3,18,2,2,2,2,19,20,21,22,1,2,2,2,2,0,6,17,3,18,19,21,1,18,18,11,14,6,7,8,9,10,11,12,13,14,15,16,17,3,18,2,19,20,21,22,1,7,8,11,11,12,13,14,14,15,16,20,22,90,7,11,14,3,3,11,14,19,21,3,3,90,7,11,14,20,22,3,3,3,1,3,2,1,8,12,13,15,16,20,22,20,22,19,20,22,3,3,3,3,3,3,6,3,2,2,2,6,18,20,22,0,0,1,3,3,0,3,3,3,6,7,8,9,10,11,12,13,14,15,16,17,3,18,2,19,20,21,22,1,3,10,3,19,3,0,6,7,8,9,10,11,12,13,14,15,16,17,3,18,2,2,19,20,21,22,1,2,6,6,7,8,9,10,11,12,13,14,15,16,17,3,18,2,19,20,21,22,1,6,6,7,8,9,10,11,12,13,14,15,16,17,3,18,2,19,20,21,22,1,18,18,10,91,91,0,0,0,38,0,38,39,39,0,40,0,0,38,38,34,34,34,38,39,34,40,41,42,43,38,39,34,40,41,42,43,34,34,38,39,34,40,41,42,43,38,39,34,40,41,42,43,0,42,0,0,38,39,40,34,34,38,39,42,0,0,39,38,38,39,39,34,40,41,41,42,42,43,38,39,39,34,40,41,42,43,38,39,39,38,39,34,40,41,42,43,39,34,34,39,39,39,39,42,39,43,42,34,38,39,34,42,34,42,38,39,34,40,41,42,43,38,39,41,42,43,39,38,39,34,40,41,42,43,38,39,34,40,41,42,43,39,38,39,34,40,41,42,43,39,39,34,39,41,0,0,0,0,0,48,49,48,49,48,49,48,49,48,49,48,48,49,49,48,49,48,49,48,48,49,48,49,48,48,48,49,48,49,48,49,48,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,51,50,51,52,52,50,51,50,51,50,51,62,55,60,53,63,58,64,61,65,56,54,66,59,67,52,50,51,62,55,60,53,63,58,64,61,65,56,54,66,59,67,52,50,51,50,51,50,51,52,50,51,52,50,51,50,51,52,50,51,50,51,50,51,52,50,51,50,50,51,51,52,50,51,62,55,60,53,63,58,64,61,65,56,54,66,59,67,52,50,50,50,51,51,51,50,51,50,50,51,50,51,62,55,60,53,63,58,64,61,65,56,54,66,59,67,52,50,51,62,55,60,53,63,58,64,61,65,56,54,66,59,67,50,50,51,51,50,50,51,52,50,51,50,51,50,51,50,51,52,50,51,50,51,50,51,52,50,51,62,55,60,53,63,58,64,61,65,56,54,66,59,67,50,50,50,51,50,51,50,51,50,51,50,51,50,51,50,51,50,51,50,51,50,51,52,50,51,62,55,60,53,63,58,64,61,65,56,54,66,59,67,52,50,51,62,55,60,53,63,58,64,61,65,56,54,66,59,67,52,50,51,62,55,60,53,63,58,64,61,65,56,54,66,59,67,52,50,51,50,51,50,51,0,68,68,0,73,0,4,70,0,68,0,0,4,70,72,74,75,75,69,0,72,72,74,75,75,78,69,0,0,78,0,4,77,71,0,76,73,73,68,73,75,73,73,77,71,0,72,72,77,73,73,73,75,78,68,4,4,4,4,68,72,73,69,74,75,71,76,77,70,78,4,68,72,73,69,74,75,71,76,77,70,78,4,4,68,68,72,73,69,69,74,75,71,71,76,77,70,70,78,78,4,4,4,4,4,4,4,4,4,4,4,68,68,72,73,69,74,75,71,76,77,70,78,4,68,72,73,69,74,75,71,76,77,70,78,4,68,69,71,70,4,68,4,68,69,71,70,78,4,68,72,73,69,74,75,71,76,77,70,78,4,68,72,73,69,74,75,71,76,77,70,78,4,68,72,73,69,74,75,71,76,77,70,78,92,93,94,95,96,95,97,98,0,0,0,0,83,84,0,0,0,0,0,0,83,83,84,0,85,84,81,82,89,81,44,83,84,82,85,86,87,88,89,81,44,83,84,82,85,86,87,88,82,44,83,84,82,85,86,44,83,84,82,85,86,44,85,87,88,82,83,84,44,44,83,84,82,82,85,86,86,89,81,44,83,84,82,85,86,87,88,83,84,44,89,81,44,83,84,82,85,86,87,88,82,44,82,89,81,44,82,87,88,82,82,82,99,89,87,88,82,82,82,44,44,83,84,82,85,86,82,86,89,81,44,83,84,82,85,86,87,88,89,81,44,83,84,82,85,86,87,88,89,81,44,83,84,82,85,86,87,88,82,44,86,44,44,44],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[5,[3,4]]]],[2,3],[[3,6],[[5,[4]]]],[[3,6],[[5,[4]]]],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[3,3],[18,18],[2,2],[19,19],[20,20],[21,21],[22,22],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[19,21],23],[6,24],[[7,21],24],[[11,6],24],[[14,6],24],[3,25],[[3,19],25],[[],9],[[],3],[[],2],[1,26],[1,26],[3,10],[[11,3],[[5,[27,4]]]],[[14,3],[[5,[27,4]]]],[6,21],[[3,19],7],[[3,19],7],[1,26],[1,26],[[],2],[[6,6],24],[[17,17],24],[[3,3],24],[[18,18],24],[[19,19],24],[[21,21],24],[[1,1],24],0,[[6,28],29],[[7,28],29],[[8,28],29],[[9,28],29],[[10,28],29],[[10,28],29],[[11,28],29],[[12,28],29],[[13,28],29],[[14,28],29],[[15,28],29],[[16,28],29],[[17,28],29],[[3,28],29],[[3,28],29],[[18,28],29],[[2,28],29],[[19,28],29],[[19,28],29],[[20,28],29],[[21,28],29],[[22,28],29],[[1,28],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[30,2],[[]],[[]],[[]],[[]],[[]],[[]],[31,[[5,[2]]]],[[],2],[30,2],[[],2],0,[6],[17],[3],[18],[19],[21],[1],0,0,[[11,25]],[[14,25]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[[]],[11],[11],[[]],[[]],[14],[14],[[]],[[]],[[]],[[]],[[],24],[7,24],[11,24],[14,24],[[3,19,21],24],[[3,19,21],24],[11,12],[14,15],[[],20],[[],22],[[3,19,24,24,24],11],[[3,19,24,24,24],14],[[],25],[7,25],[11,25],[14,25],[20,25],[22,25],[[3,19,21],[[32,[25]]]],[[3,19],25],[3,18],[1],[[],3],[[],2],[[26,26],1],[8,32],[12,32],[13,32],[15,32],[16,32],[20,32],[22,32],[20,32],[22,32],[19],[[20,25],32],[[22,25],32],[[3,6],[[5,[4]]]],[[3,6],[[5,[4]]]],[[3,6],[[5,[3,4]]]],[[3,6],[[5,[3,4]]]],[[3,6]],[[3,6],3],[6,19],[[3,19,21],[[32,[1]]]],[2,2],[[2,25,25,19,21],2],[[2,19,21],2],[6,[[32,[1]]]],0,[20],[22],0,0,[[1,1]],[3,17],[3],0,[3],[3,27],[[3,19],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,23,31],27],[[],27],[[],27],[[],27],[3,30],[23,32],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],[[5,[2]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],[[5,[2,4]]]],[[31,3],[[5,[6,4]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[6,3],[[5,[27,4]]]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,0,[[10,9],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[34,[[35,[6,34]]]],[34,[[36,[6,34]]]],[34,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[34,6],[[32,[34]]]],[34,[[37,[6,34]]]],[38,38],[39,39],[34,34],[40,40],[41,41],[42,42],[43,43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,39,19,44],[[5,[45,4]]]],[[42,39],24],[[3,19,25,44],[[5,[34,4]]]],[[3,39,19,44],[[5,[34,4]]]],[[],38],[[],39],[[],40],[34,25],[34,41],[[38,38],24],[[39,39],24],[[42,42],24],[[3,19,25,44],[[5,[42,4]]]],[[3,19,25,44],[[5,[[46,[6]],4]]]],[[],39],[[38,28],29],[[38,28],29],[[39,28],29],[[39,28],29],[[34,28],29],[[40,28],29],[[41,28],29],[[41,28],29],[[42,28],29],[[42,28],29],[[43,28],29],[[]],[[]],[[[32,[25]]],39],[[]],[[]],[[]],[[]],[[]],[38],[39],[39,39],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,24],[[34,25],24],[34,24],[39,24],[39,24],[39,24],[39,38],[42,39],[25,[[32,[39]]]],[[43,25,25],25],[[39,39],42],[34,25],[[38,38],[[32,[45]]]],[[39,39],[[32,[45]]]],[34,19],[42,39],[34,47],[42,[[32,[39]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],27],[[],27],[[25,25],[[32,[43]]]],[39,[[32,[39]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[39,[[32,[25]]]],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],39],[39,25],[34,39],[25,[[32,[39]]]],[[41,40],41],0,0,0,0,0,[[]],[[]],[[]],[[]],[[48,3],[[47,[24]]]],[[49,30],[[47,[24]]]],[[48,50],[[47,[24]]]],[[49,51],[[47,[24]]]],[[48,28],29],[[49,28],29],[[]],[49,48],[[]],[48,49],[[]],[[]],[[]],[[]],[48,49],[[],48],[[],49],[48,32],[49,32],[48,49],[48,49],[[],5],[[],5],[[],5],[[],5],[48,[[47,[[32,[3]]]]]],[49,[[47,[[32,[30]]]]]],[[],33],[[],33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[50,50]],[[51,51]],[[50,50]],[[51,51]],[[52,52]],[[52,52]],[[50,50]],[[51,51]],[[50,50]],[[51,51]],[[50,50]],[[51,51]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50,52],[51,52],[50],[51],[52,52],[50,50],[51,51],[[]],[[]],[[]],[[50,3],24],[[51,30],24],[[],52],[[],50],[[],51],[[50,50],53],[[51,51],54],[50,55],[51,56],[[52,52],24],[[50,50],24],[[51,51],24],[[50,57]],[[50,57]],[[51,57]],[[51,57]],[[52,28],29],[[50,28],29],[[51,28],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51,50],[[],50],[[],51],[50,51],[[]],[57,50],[57,51],[51,50],[[50,3],24],[[51,30],24],[[50,50],58],[[51,51],59],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[50],[50],[51],[51],[50,51],[[50,50],24],[[51,51],24],[52,24],[50,24],[51,24],[[50,50],24],[[51,51],24],[[50,50],24],[[51,51],24],[50,60],[51,61],[52,25],[50,25],[51,25],[50,47],[51,47],[50,47],[51,47],[[],52],[[],50],[[],51],[62,32],[55,32],[60,32],[53,32],[63,32],[58,32],[64,32],[61,32],[65,32],[56,32],[54,32],[66,32],[59,32],[67,32],[50,51],[50,51],[[50,3],24],[[51,30],24],[[],52],[[],52],[[],52],[[],52],[[50,52]],[[51,52]],[50],[51],[50,47],[51,47],[50],[51],[[50,50]],[[51,51]],[[50,50],63],[[51,51],66],[[50,3],[[32,[3]]]],[[51,30],[[32,[30]]]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[50,50],64],[[51,51],67],[52,50],[52,51],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[68,[[32,[69]]]],[4,[[32,[70]]]],[4,[[32,[68]]]],[4,[[32,[71]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[4,28],29],[[4,28],29],[[68,28],29],[[68,28],29],[[72,28],29],[[73,28],29],[[69,28],29],[[69,28],29],[[74,28],29],[[75,28],29],[[71,28],29],[[71,28],29],[[76,28],29],[[77,28],29],[[70,28],29],[[70,28],29],[[78,28],29],[[78,28],29],[71,4],[77,4],[[],4],[76,4],[[]],[68,4],[72,4],[74,4],[78,4],[70,4],[75,4],[69,68],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[79],[79],[79],[79],[79],[4,[[32,[80]]]],[68,[[32,[80]]]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[81,24]],[82,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[82,6],[[5,[4]]]],[44,44],[83,83],[84,84],[82,82],[85,85],[86,86],[[]],[[]],[[]],[[]],[[]],[[]],[[],44],[[],85],[[],87],[[],88],[82,86],[[83,83],24],[[84,84],24],[44,19],[[44,28],29],[[83,28],29],[[84,28],29],[[82,28],29],[[82,28],29],[[85,28],29],[[86,28],29],[[86,28],29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[83],[84],[44,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[82,24],[44,24],[82,11],[[25,24],89],[82,81],[24,44],[24,82],[[],87],[[],88],[44,82],[82,19],[[82,6],[[5,[4]]]],[82],[[89,82]],[[87,82]],[[88,82]],[82],[82,44],[82,84],[44,83],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[82,[[32,[19]]]],[[44,19],44],[[86,85],86],[[44,3],[[5,[44,4]]]],[[44,24],44],[[44,83],44]],"p":[[3,"Shift"],[3,"BoardBuilder"],[3,"Board"],[4,"Error"],[4,"Result"],[4,"Action"],[3,"DoveSet"],[3,"DoveSetIntoIter"],[4,"BoardDisplayFormat"],[3,"BoardDisplay"],[3,"ActionsFwd"],[3,"ActionsFwdIter"],[3,"ActionsFwdIntoIter"],[3,"ActionsBwd"],[3,"ActionsBwdIter"],[3,"ActionsBwdIntoIter"],[4,"SurroundedStatus"],[3,"Rectangle"],[4,"Color"],[3,"ColorIter"],[4,"Dove"],[3,"DoveIter"],[15,"char"],[15,"bool"],[15,"usize"],[15,"i8"],[3,"String"],[3,"Formatter"],[6,"Result"],[15,"u64"],[15,"str"],[4,"Option"],[3,"TypeId"],[3,"BoardValueTree"],[3,"Keys"],[3,"Iter"],[3,"Values"],[4,"BoardValueKind"],[3,"BoardValue"],[4,"TreeDisplayFormat"],[3,"TreeDisplay"],[3,"Interval"],[3,"PositionMapper"],[3,"GameRule"],[4,"Ordering"],[3,"Vec"],[6,"Result"],[3,"LazyBoardLoader"],[3,"LazyRawBoardLoader"],[3,"BoardSet"],[3,"RawBoardSet"],[3,"Capacity"],[3,"Difference"],[3,"RawDifference"],[3,"Drain"],[3,"RawDrain"],[8,"IntoIterator"],[3,"Intersection"],[3,"RawIntersection"],[3,"Iter"],[3,"RawIter"],[3,"IntoIter"],[3,"SymmetricDifference"],[3,"Union"],[3,"RawIntoIter"],[3,"RawSymmetricDifference"],[3,"RawUnion"],[4,"BoardError"],[4,"ActionConvertError"],[4,"AnalysisError"],[4,"GameError"],[4,"BoardCreateErrorKind"],[4,"ActionPerformErrorKind"],[4,"EncodingErrorKind"],[4,"DecodingErrorKind"],[4,"GameRuleCreateErrorKind"],[4,"PlayingErrorKind"],[4,"ArgsValidationErrorKind"],[3,"Demand"],[8,"Error"],[3,"Arena"],[3,"Game"],[4,"Judge"],[4,"GameStatus"],[4,"GameDisplayFormat"],[3,"GameDisplay"],[3,"RandomAgent"],[3,"ConsoleAgent"],[3,"AnalystAgent"],[8,"ActionContainer"],[13,"Simple"],[13,"EncodingError"],[13,"DecodingError"],[13,"ArgsValidationError"],[13,"ActionPerformError"],[13,"BoardCreateError"],[13,"GameRuleCreateError"],[13,"PlayingError"],[8,"Agent"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
